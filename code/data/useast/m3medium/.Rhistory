barplot(x, beside = T,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = c(1,2,3),space = 0.2)
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = rownames(VADeaths), ylim = c(0, 100))
barplot(x, beside = T,
col = c("lightblue", "mistyrose"),
legend = c(1,2,3))
barplot(x, beside = T,
col = c("lightblue", "mistyrose"),
legend = c("male","female"))
mp <- barplot(VADeaths) # default
tot <- colMeans(VADeaths)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = rownames(VADeaths), ylim = c(0, 100))
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
ylim = c(0, 100))
rownames(x)<-c("本科","硕士","博士")
x
x<-matrix(c(10154,6504,3465,5520,3988,1530))
x
x<-matrix(c(10154,6504,3465,5520,3988,1530),nrow = 3,ncol = 2)
x
barplot(x, beside = T,
col = c("lightblue", "mistyrose"),
legend = c("male","female"))
x<-c(10154,5220,6504,3988,3465,1530)
x<-matrix(x,nrow = 2,ncol = 3)
x
colnames(x)<-c("本科","硕士","博士")
barplot(x, beside = T,
col = c("lightblue", "mistyrose"),
legend = c("male","female"))
x<-c(10154,5220,6504,3988,3465,1530)
x<-matrix(x,nrow = 2,ncol = 3)
colnames(x)<-c("1","2","3")
barplot(x, beside = T,
col = c("lightblue", "mistyrose"),
legend = c("male","female"))
x<-c(10154,5220,6504,3988,3465,1530)
x<-matrix(x,nrow = 2,ncol = 3)
colnames(x)<-c("undergraduate","master","doctor")
barplot(x, beside = T,
col = c("lightblue", "mistyrose"),
legend = c("male","female"))
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female"))
mp <- barplot(VADeaths) # default
tot <- colMeans(VADeaths)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = rownames(VADeaths), ylim = c(0, 100))
title(main = "Death Rates in Virginia", font.main = 4)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
hh <- t(VADeaths)[, 5:1]
mybarcol <- "gray20"
mp <- barplot(hh, beside = TRUE,
col = c("lightblue", "mistyrose",
"lightcyan", "lavender"),
legend = colnames(VADeaths), ylim = c(0,100),
main = "Death Rates in Virginia", font.main = 4,
sub = "Faked upper 2*sigma error bars", col.sub = mybarcol,
cex.names = 1.5)
segments(mp, hh, mp, hh + 2*sqrt(1000*hh/100), col = mybarcol, lwd = 1.5)
stopifnot(dim(mp) == dim(hh))  # corresponding matrices
mtext(side = 1, at = colMeans(mp), line = -2,
text = paste("Mean", formatC(colMeans(hh))), col = "red")
x<-c(10154,5220,6504,3988,3465,1530)
x<-matrix(x,nrow = 2,ncol = 3)
colnames(x)<-c("undergraduate","master","doctor")
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female"))
title(main = "性别学历分布图", font.main = 4)
title(main = "sex and education distribution map", font.main = 4)
x<-c(10154,5220,6504,3988,3465,1530)
x<-matrix(x,nrow = 2,ncol = 3)
colnames(x)<-c("undergraduate","master","doctor")
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female"))
title(main = "sex and education distribution map", font.main = 4)
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female")，space = 0.3)
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female")，space = 0.3)
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female"),space = 0.3)
legend = c("male","female"),space = 1)
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female"),space = 1)
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female"))
x
sum(x(1,))
sum(x[1,])
sum(x[1,])/sum(x[2,])
x<-c(10154,5220,6504,3988,3465,1530)
x<-matrix(x,nrow = 2,ncol = 3)
colnames(x)<-c("undergraduate","master","doctor")
barplot(x, beside = T,
col = rainbow(2),
legend = c("male","female"))
title(main = "sex and education distribution map", font.main = 4)
b<-c(sum(x[,1]),sum(x[,2]),sum(x[,3]))
b
b/b[3]
library(rattle)
data<-audit
library(klaR)
computer.NB<-NaiveBayes(data[,2:10],grouping = factor(data[,13]),usekernel = T,fL=1)
computer.NB.predict<-predict(computer.NB,data[,2:10])
library(kknn)
computer.kknn<-kknn(factor(TARGET_Adjusted)~Age+Income+Deductions+Hours,train = data[,c(2,7,9,10,13)],test = data[,c(2,7,9,10)],k = 38,scale = T,kernel = "rectangular")
#错判率
table(data[,13],computer.NB.predict$class)
error.NB<-sum(as.numeric(computer.NB.predict$class!=data[,13]))/nrow(data)
error.NB
error.kknn<-sum(computer.kknn$fitted.values!=data[,13])/nrow(data)
error.kknn
#kappa系数
library(fmsb)
kappa.NB<-Kappa.test(table(data[,13],computer.NB.predict$class))
kappa.NB
kappa.kknn<-Kappa.test(table(data[,13],computer.kknn$fitted.values))
kappa.kknn
computer.NB.predict$labels <- data[,13]
computer.NB.predict$predictions <-computer.NB.predict$posterior[,2]
pred <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
#敏感度-特异度曲线
perf1 <- performance(pred,"sens","spec")
plot(perf1)
library(ROCR)
pred <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
#敏感度-特异度曲线
perf1 <- performance(pred,"sens","spec")
plot(perf1)
computer.kknn$labels <- data[,13]
computer.kknn$predictions <-computer.kknn$posterior[,2]
pred.kknn <- prediction(computer.kknn$predictions, computer.kknn$labels)
computer.kknn$labels <- data[,13]
computer.kknn$predictions <-computer.kknn$posterior[,2]
pred.kknn <- prediction(computer.kknn$predictions, computer.kknn$labels)
help("prediction")
computer.kknn$predictions
computer.kknn$posterior[,2]
computer.NB.predict$posterior[,2]
perf2 <- performance(pred.NB,"tpr","fpr")
perf1.NB <- performance(pred.NB,"sens","spec")
library(ROCR)
computer.NB.predict$labels <- data[,13]
computer.NB.predict$predictions <-computer.NB.predict$posterior[,2]
pred.NB <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
#敏感度-特异度曲线
perf1.NB <- performance(pred.NB,"sens","spec")
plot(perf1.NB)
#ROC
perf2 <- performance(pred.NB,"tpr","fpr")
plot(perf2)
#召回率-精确率曲线
perf3 <- performance(pred.NB,"prec","rec")
plot(perf3)
#提升图
perf4 <- performance(pred.NB,"lift","rpp")
plot(perf4)
perf4
computer.kknn
computer.kknn$prob
library(ROCR)
computer.NB.predict$labels <- data[,13]
computer.kknn$labels<-data[,13]
computer.NB.predict$predictions <-computer.NB.predict$posterior[,2]
computer.kknn$predictions<-computer.kknn$prob[,2]
pred.NB <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
pred.kknn<- prediction(computer.kknn$predictions,computer.kknn$labels)
#敏感度-特异度曲线
perf1.NB <- performance(pred.NB,"sens","spec")
perf1.kknn<- performance(pred.kknn,"sens","spec")
perf1.NB <- performance(pred.NB,"sens","spec")
perf1.kknn<- performance(pred.kknn,"sens","spec")
plot(perf1.NB,col="red")
plot(perf1.kknn,col="blue",add=T)
#ROC
perf2.NB <- performance(pred.NB,"tpr","fpr")
perf2.kknn<-performance(pred.kknn,"tpr","fpr")
plot(perf2.NB,col="red")
plot(perf2.kknn,col="blue",add=T)
perf3.NB <- performance(pred.NB,"prec","rec")
perf3.kknn<-performance(pred.kknn,"prec","rec")
plot(perf3.NB)
plot(perf3.kknn)
plot(perf3.NB,col="red")
plot(perf3.NB,col="red")
plot(perf3.NB,col="red")
plot(perf3.kknn,col="blue",add=T)
perf4.NB <- performance(pred.NB,"lift","rpp")
perf4.kknn<-performance(pred.kknn,"lift","rpp")
plot(perf4.NB,col="red")
plot(perf4.kknn,col="blue",add=T)
library(rattle)
data<-audit
library(klaR)
computer.NB<-NaiveBayes(data[,2:10],grouping = factor(data[,13]),usekernel = T,fL=1)
computer.NB.predict<-predict(computer.NB,data[,2:10])
library(kknn)
computer.kknn<-kknn(factor(TARGET_Adjusted)~Age+Income+Deductions+Hours,train = data[,c(2,7,9,10,13)],test = data[,c(2,7,9,10)],k = 38,scale = T,kernel = "rectangular")
#错判率
table(data[,13],computer.NB.predict$class)
error.NB<-sum(as.numeric(computer.NB.predict$class!=data[,13]))/nrow(data)
error.NB
error.kknn<-sum(computer.kknn$fitted.values!=data[,13])/nrow(data)
error.kknn
#kappa系数
library(fmsb)
kappa.NB<-Kappa.test(table(data[,13],computer.NB.predict$class))
kappa.NB
kappa.kknn<-Kappa.test(table(data[,13],computer.kknn$fitted.values))
kappa.kknn
computer.NB.predict$labels <- data[,13]
computer.kknn$labels<-data[,13]
computer.NB.predict$predictions <-computer.NB.predict$posterior[,2]
computer.kknn$predictions<-computer.kknn$prob[,2]
pred.NB <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
pred.kknn<- predic
library(ROCR)
computer.NB.predict$labels <- data[,13]
computer.kknn$labels<-data[,13]
computer.NB.predict$predictions <-computer.NB.predict$posterior[,2]
computer.kknn$predictions<-computer.kknn$prob[,2]
pred.NB <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
pred.kknn<- prediction(computer.kknn$predictions,computer.kknn$labels)
#敏感度-特异度曲线
perf1.NB <- performance(pred.NB,"sens","spec")
perf1.kknn<- performance(pred.kknn,"sens","spec")
plot(perf1.NB,col="red")
plot(perf1.kknn,col="blue",add=T)
#ROC
perf2.NB <- performance(pred.NB,"tpr","fpr")
perf2.kknn<-performance(pred.kknn,"tpr","fpr")
plot(perf2.NB,col="red")
plot(perf2.kknn,col="blue",add=T)
#召回率-精确率曲线
perf3.NB <- performance(pred.NB,"prec","rec")
perf3.kknn<-performance(pred.kknn,"prec","rec")
plot(perf3.NB,col="red")
plot(perf3.kknn,col="blue",add=T)
#提升图
perf4.NB <- performance(pred.NB,"lift","rpp")
perf4.kknn<-performance(pred.kknn,"lift","rpp")
plot(perf4.NB,col="red")
plot(perf4.kknn,col="blue",add=T)
library(rattle)
data<-audit
library(klaR)
computer.NB<-NaiveBayes(data[,2:10],grouping = factor(data[,13]),usekernel = T,fL=1)
computer.NB.predict<-predict(computer.NB,data[,2:10])
library(kknn)
computer.kknn<-kknn(factor(TARGET_Adjusted)~Age+Income+Deductions+Hours,train = data[,c(2,7,9,10,13)],test = data[,c(2,7,9,10)],k = 38,scale = T,kernel = "rectangular")
#错判率
table(data[,13],computer.NB.predict$class)
error.NB<-sum(as.numeric(computer.NB.predict$class!=data[,13]))/nrow(data)
error.NB
error.kknn<-sum(computer.kknn$fitted.values!=data[,13])/nrow(data)
error.kknn
#kappa系数
library(fmsb)
kappa.NB<-Kappa.test(table(data[,13],computer.NB.predict$class))
kappa.NB
kappa.kknn<-Kappa.test(table(data[,13],computer.kknn$fitted.values))
kappa.kknn
#考虑成本评估
library(ROCR)
computer.NB.predict$labels <- data[,13]
computer.kknn$labels<-data[,13]
computer.NB.predict$predictions <-computer.NB.predict$posterior[,1]
computer.kknn$predictions<-computer.kknn$prob[,1]
pred.NB <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
pred.kknn<- prediction(computer.kknn$predictions,computer.kknn$labels)
#敏感度-特异度曲线
perf1.NB <- performance(pred.NB,"sens","spec")
perf1.kknn<- performance(pred.kknn,"sens","spec")
plot(perf1.NB,col="red")
plot(perf1.kknn,col="blue",add=T)
#ROC
perf2.NB <- performance(pred.NB,"tpr","fpr")
perf2.kknn<-performance(pred.kknn,"tpr","fpr")
plot(perf2.NB,col="red")
plot(perf2.kknn,col="blue",add=T)
#召回率-精确率曲线
perf3.NB <- performance(pred.NB,"prec","rec")
perf3.kknn<-performance(pred.kknn,"prec","rec")
plot(perf3.NB,col="red")
plot(perf3.kknn,col="blue",add=T)
#提升图
perf4.NB <- performance(pred.NB,"lift","rpp")
perf4.kknn<-performance(pred.kknn,"lift","rpp")
plot(perf4.NB,col="red")
plot(perf4.kknn,col="blue",add=T)
library(ROCR)
computer.NB.predict$labels <- data[,13]
computer.kknn$labels<-data[,13]
computer.NB.predict$predictions <-computer.NB.predict$posterior[,1]
computer.kknn$predictions<-computer.kknn$prob[,1]
pred.NB <- prediction(computer.NB.predict$predictions, computer.NB.predict$labels)
pred.kknn<- prediction(computer.kknn$predictions,computer.kknn$labels)
#敏感度-特异度曲线
perf1.NB <- performance(pred.NB,"sens","spec")
perf1.kknn<- performance(pred.kknn,"sens","spec")
plot(perf1.NB,col="red")
plot(perf1.kknn,col="blue",add=T)
#ROC
perf2.NB <- performance(pred.NB,"tpr","fpr")
perf2.kknn<-performance(pred.kknn,"tpr","fpr")
plot(perf2.NB,col="red")
plot(perf2.kknn,col="blue",add=T)
#召回率-精确率曲线
perf3.NB <- performance(pred.NB,"prec","rec")
perf3.kknn<-performance(pred.kknn,"prec","rec")
plot(perf3.NB,col="red")
plot(perf3.kknn,col="blue",add=T)
#提升图
perf4.NB <- performance(pred.NB,"lift","rpp")
perf4.kknn<-performance(pred.kknn,"lift","rpp")
plot(perf4.NB,col="red")
plot(perf4.kknn,col="blue",add=T)
0.5*(1-((4/7)^2+(3/7)^2)+1-((1/7)^2)+(6/7)^2)
0.5*(1-((4/7)^2+(3/7)^2)+1-((1/7)^2+(6/7)^2))
0.5*(1-((3/5)^2+(2/5)^2)+1-((2/9)^2+(7/9)^2))
0.5*(1-((3/9)^2+(6/9)^2)+1-((2/5)^2+(3/5)^2))
0.5*(1-((5/10)^2+(5/10)^2)+1-((0/4)^2+(4/4)^2))
10/14*(1-((5/10)^2+(5/10)^2))+4/14*(1-((0/4)^2+(4/4)^2))
library(rattle)
library(sampling)
library(class)
formula_audit<-TARGET_Adjusted~Age+Employment+Education+Marital+Occupation+Income+Gender+Deductions+Hours
set.seed(1)
n<-round(2/3*nrow(audit))
sub_train<-sample(1:nrow(audit),n)
data_train<-getdata(data,sub_train)
data_test<-getdata(data,-sub_train)
rp_audit<-rpart(formula_audit,data_train,maxdepth=10,minsplit=1,cp=0.01)
library(rpart)
library(rpart.plot)
library(maptree)
rp_audit<-rpart(formula_audit,data_train,maxdepth=10,minsplit=1,cp=0.01)
rpart.plot(rp_audit)
rpart.plot(rp_audit,type=4,fallen.leaves=TRUE)
predict(rp_audit,data_test,type="prob")
data_train<-getdata(data,sub_train)
data_test<-getdata(data,-sub_train)
rp_audit<-rpart(formula_audit,data_train,maxdepth=10,minsplit=1,cp=0.01)
rpart.plot(rp_audit,type=4,fallen.leaves=TRUE)
print(rp_audit)
head(audit)
formula_audit<-factor(TARGET_Adjusted)~Age+Employment+Education+Marital+Occupation+Income+Gender+Deductions+Hours
set.seed(1)
n<-round(2/3*nrow(audit))
sub_train<-sample(1:nrow(audit),n)
data_train<-getdata(data,sub_train)
data_test<-getdata(data,-sub_train)
rp_audit<-rpart(formula_audit,data_train,maxdepth=10,minsplit=1,cp=0.01)
print(rp_audit)
rpart.plot(rp_audit,type=4,fallen.leaves=TRUE)
predict(rp_audit,data_test,type="prob")
help("write.csv")
?predict
help(rpart)
install.packages(caretRnsemble)
install.packages('caretEnsemble')
install.packages("caret")
install.packages("caret")
(92*3+97*2+97*2+82*4+95*2+76*3+91*2+90*2)/(3+2+2+4+2+3+4)
install.packages(arules)
install.packages("arules")
library(arules)
data("Groceries")
Groceries
inspect(Groceries[1:10])
Summary(Groceries)
summary(Groceries)
itemsets_apr<-apriori(Groceries,parameter = list(supp=0.001,target="frequent items"),control = list(sort=-1))
names(itemsets_apr)
itemsets_apr
inspect(itemsets_apr[1:5])
itemsets_apr<-apriori(Groceries,parameter = list(supp=0.001,minlen=3,target="frequent items"),control = list(sort=-1))
inspect(itemsets_apr[1:5])
itemsets_apr<-apriori(Groceries,parameter = list(supp=0.001,minlen=3),control = list(sort=-1))
inspect(itemsets_apr[1:5])
setwd("/Users/wxc575843/Documents/papers/fxu/code/data/useast/d28xlarge/")
w=read.table("useast1a.txt",header = TRUE)
price = w[length(w[,2]):1,2]
num_train=round(2*length(price)/3)
pirce=read.table("useast1a.txt",header = TRUE)
price=read.table("useast1a.txt",header = TRUE)
num_train=round(2*length(price)/3)
num_test=length(price)-num_train
price_train<-price[1:num_train]
price_test<-price[num_train+1:length(price)]
setwd("/Users/wxc575843/Documents/papers/fxu/code/data/useast/d28xlarge/")
price=read.table("useast1a.txt",header = TRUE)
num_train=round(2*length(price)/3)
length(price)
price
class(price)
size(price)
nrow(price)
num_train=round(2*nrow(price)/3)
num_test=length(price)-num_train
num_test=nrow(price)-num_train
price_train<-price[1:num_train]
price[1]
price=as.vector(read.table("useast1a.txt",header = TRUE))
price
class(price)
price[1,1]
price[1,2]
price[1,3]
price[2,1]
price[1:20,1]
price_train<-price[1:num_train,1]
price_test<-price[num_train+1:,1]
price_test<-price[num_train+1:nrow(price),1]
num_train
nrow(price)
price[num_train+1:nrow(price),1]
price[2:4,1]
price_test<-price[-c(1:num_train),1]
library(forecast)
a<-auto.arima(price_train,ic="bic")
f<-forecast(a,num_test)
plot(price_test,col='red',type="l")
lines(f$upper)
help("forecast")
f$mean
f$fitted
lines(f$mean)
plot(f$mean)
a$coef
View(price)
price=read.table("useast1a.txt",header = TRUE)
setwd("/Users/wxc575843/Documents/papers/fxu/code/data/useast/d28xlarge/")
price=read.table("useast1a.txt",header = TRUE)
num_train=round(2*nrow(price)/3)
num_test=nrow(price)-num_train
price_train<-price[1:num_train,1]
price_test<-price[-c(1:num_train),1]
library(forecast)
a<-auto.arima(price_train,ic="bic")
f<-forecast(a,num_test)
lines(f$mean)
setwd("/Users/wxc575843/Documents/papers/fxu/code/data/useast/m4xlarge/")
price = w[length(w[,2]):1,2]
w=read.table("useast1a.txt",header = TRUE)
price = w[length(w[,2]):1,2]
time<-strptime(w[,3],"%Y-%m-%dT%H:%M:%S")
time<-time[length(time):1]
View(w)
price_sample_function<-function(price,time)
{
a<-c(1);i<-1;j<-1
len<-length(time)
while (j<len) {
t = time[j]
while (t<time[j+1]) {
a[i]=price[j]
i=i+1
t=t+300 #add 300 seconds
}
j=j+1
}
return(a)
}
sample_price<-price_sample_function(price,time)
View(price_sample_function)
price_sample_function<-function(price,time)
{
a<-c(1);i<-1;j<-1
len<-length(time)
t=time[1]
while (j<len) {
# t = time[j]
while (t<time[j+1]) {
a[i]=price[j]
i=i+1
t=t+300 #add 300 seconds
}
j=j+1
}
return(a)
}
sample_price<-price_sample_function(price,time)
setwd("/Users/wxc575843/Documents/papers/fxu/code/data/useast/m3medium/")
w=read.table("tmp.txt",header = TRUE)
price = w[length(w[,2]):1,2]
diff(price)
price
